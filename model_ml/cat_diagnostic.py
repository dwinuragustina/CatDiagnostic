# -*- coding: utf-8 -*-
"""Cat Diagnostic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1knj85iynp-lYP7GB2E5hGS2ahyUzAwN_
"""

import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
import numpy as np

df = pd.read_csv('data.csv')
df

# penyakit = pd.get_dummies(df.penyakit)
# penyakit

# new_df = pd.concat([df, penyakit], axis=1)
# new_df = new_df.drop(columns="penyakit")
# new_df
# new_df.info()

# dataset = df.values
# dataset

attributes = np.array(df[['anorexia','muntah','lemah','kurang_respon','dehidrasi','demam','diare','hipersevalis','radang_telinga','batuk','hidung_meler','gatal','telinga_keropeng','pilek','bersin2','mata_berair']])
lables = np.array(df['penyakit'])

# print(f'Attributes:\n{attributes}\n')
# print(f'Lables:\n{lables}\n')

from sklearn.preprocessing import LabelBinarizer
lb = LabelBinarizer()
new_lables = lb.fit_transform(lables)
# print(f'new_lables:\n{Y_train}')

# Y_train = new_lables.flatten()
# print(f'news_lables: {Y_train}')

X_train, X_test, y_train, y_test = train_test_split(attributes, new_lables, test_size=0.2)

from sklearn.neighbors import KNeighborsClassifier
K=3
model = KNeighborsClassifier(n_neighbors=K)
model.fit(X_train, y_train)

anorexia = 0
muntah = 0
lemah = 0
kurang_respon = 0
dehidrasi = 0
demam = 1
diare = 1
hipersevalis = 1
radang_telinga = 1
batuk = 1
hidung_meler = 1
gatal = 1
telinga_keropeng = 1
pilek = 1
bersin2 = 1
mata_berair = 1
X_new = np.array([anorexia,muntah,lemah,kurang_respon,dehidrasi,demam,diare,hipersevalis,radang_telinga,batuk,hidung_meler,gatal,telinga_keropeng,pilek,bersin2,mata_berair]).reshape(1, -1)
X_new

y_new = model.predict(X_new)
y_new

lb.inverse_transform(y_new)

y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_pred)

print(f'Accuracy: {acc}')

# from sklearn.metrics import precision_score
# prec = precision_score(y_test, y_pred)

# print(f'Precision: {prec}')

# from sklearn.metrics import recall_score
# rec = recall_score(y_test, y_pred)

# print(f'Recall: {rec}')

# from sklearn.metrics import f1_score
# f1 = f1_score(y_test, y_pred)

# print(f'F1_score: {f1}')

from sklearn.metrics import classification_report

cls_report = classification_report(y_test, y_pred)
print(f'Classification Report: \n{cls_report}')

# from sklearn.metrics import matthews_corrcoef
# mcc = matthews_corrcoef(y_test, y_pred)

# print(f'MCC: {mcc}')